diff -Naur a/configure.ac b/configure.ac
--- a/configure.ac	2019-04-19 14:50:31.000000000 +0000
+++ b/configure.ac	2019-04-23 19:27:17.000000000 +0000
@@ -235,29 +235,37 @@
     AC_CHECK_HEADERS([asm/page.h])
 fi
 
-#
-# libsecp256k1
-#
-# FIXME: This is needed to force libtool to use all object files from secp.
-#        We can only build secp properly by recursively invoking
-#        configure/make, and can't include it as a noinst_ library. Libtool
-#        assumes that such libraries will be installed along with our library
-#        target and so won't force all object files in the library to be
-#        included in ours - despite the fact that we are making a shared
-#        library and linking to a static one. This is broken and we work
-#        around it by hacking the whole-archive flags into the _LDADD variable
-#        for wallycore.
-#        Because automake tries to police its users very strictly and fails
-#        hard when flags are passed in this way, we have to substitute the
-#        flags here.
-#        Because libtool both intercepts -Wl and arbitrarily re-orders its
-#        command line inputs, we have to concoct a single expression to
-#        enforce linking that cannot be split, hence the below expression.
-LIBADD_SECP256K1="secp256k1/.libs/libsecp256k1.a"
-if test "x$whole_archive" == "xyes"; then
-    LIBADD_SECP256K1="-Wl,--whole-archive,secp256k1/.libs/libsecp256k1.a,--no-whole-archive"
+PKG_CHECK_MODULES([libsecp256k1_zkp],[libsecp256k1_zkp],[
+	LIBADD_SECP256K1="${libsecp256k1_zkp_LIBS}"
+	libsecp256k1_CFLAGS="${libsecp256k1_zkp_CFLAGS}"
+],[
+    PKG_CHECK_MODULES([libsecp256k1],[libsecp256k1],[
+		LIBADD_SECP256K1="${libsecp256k1_LIBS}"
+    ])
+])
+AC_ARG_ENABLE(elements,
+    AS_HELP_STRING([--disable-elements],[disable support for Elements assets (default: if libsecp256k1 supports it)]),
+    [use_elements=$enableval], [use_elements=auto])
+if test "x$use_elements" != "xno"; then
+	libsecp256k1_supports_elements=yes
+	AC_CHECK_LIB([secp256k1],[secp256k1_ecdh],[],[libsecp256k1_supports_elements=no],[$libsecp256k1_LIBS])
+	AC_CHECK_LIB([secp256k1],[secp256k1_generator_parse],[],[libsecp256k1_supports_elements=no],[$libsecp256k1_LIBS])
+	AC_CHECK_LIB([secp256k1],[secp256k1_pedersen_commitment_parse],[],[libsecp256k1_supports_elements=no],[$libsecp256k1_LIBS])
+	AC_CHECK_LIB([secp256k1],[secp256k1_surjectionproof_serialize],[],[libsecp256k1_supports_elements=no],[$libsecp256k1_LIBS])
+	AC_MSG_CHECKING([if libsecp256k1 supports features needed for Elements assets])
+	AC_MSG_RESULT([$libsecp256k1_supports_elements])
+	if test "x$use_elements" = "xyes"; then
+		if test "x$libsecp256k1_supports_elements" = "xno"; then
+			AC_MSG_ERROR([libsecp256k1 does not support ecdh, generator, rangeproof, and surjectionproof modules; required for Elements asset support (you specified --enable-elements)])
+		fi
+	else  # auto
+		use_elements=$libsecp256k1_supports_elements
+	fi
 fi
+AM_CONDITIONAL([USE_ELEMENTS], [test "x$use_elements" == "xyes"])
+
 AC_SUBST([LIBADD_SECP256K1])
+AC_SUBST([libsecp256k1_CFLAGS])
 
 #
 # Python facilities
@@ -396,7 +404,6 @@
 export LD
 export LDFLAGS
 ac_configure_args="${ac_configure_args} --disable-shared ${secp_jni} --with-pic --with-bignum=no --enable-experimental --enable-module-ecdh --enable-module-rangeproof --enable-module-surjectionproof --enable-module-whitelist --enable-module-generator --enable-openssl-tests=no --enable-tests=no --enable-exhaustive-tests=no --enable-benchmark=no --disable-dependency-tracking"
-AC_CONFIG_SUBDIRS([src/secp256k1])
 
 
 AC_OUTPUT
diff -Naur a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am	2019-07-18 13:46:42.000000000 +0000
+++ b/src/Makefile.am	2019-08-17 17:18:11.350243468 +0000
@@ -13,7 +13,6 @@
 include_HEADERS += $(top_srcdir)/include/wally_bip39.h
 include_HEADERS += $(top_srcdir)/include/wally_core.h
 include_HEADERS += $(top_srcdir)/include/wally_crypto.h
-include_HEADERS += $(top_srcdir)/include/wally_elements.h
 include_HEADERS += $(top_srcdir)/include/wally_script.h
 include_HEADERS += $(top_srcdir)/include/wally_transaction.h
 
@@ -173,7 +172,6 @@
     bip39.c \
     bech32.c \
     ecdh.c \
-    elements.c \
     hex.c \
     hmac.c \
     internal.c \
@@ -199,15 +197,18 @@
     include/wally_bip39.h \
     include/wally_core.h \
     include/wally_crypto.h \
-    include/wally_elements.h \
     include/wally_script.h \
     include/wally_symmetric.h \
     include/wally_transaction.h
 
-libwallycore_la_CFLAGS = -I$(top_srcdir) -Iccan -DWALLY_CORE_BUILD=1 $(AM_CFLAGS)
+libwallycore_la_CFLAGS = -I$(top_srcdir) -Iccan -DWALLY_CORE_BUILD=1 $(AM_CFLAGS) $(libsecp256k1_CFLAGS)
 libwallycore_la_LIBADD = $(LIBADD_SECP256K1) $(noinst_LTLIBRARIES)
 
-SUBDIRS = secp256k1
+if USE_ELEMENTS
+include_HEADERS += $(top_srcdir)/include/wally_elements.h
+libwallycore_la_SOURCES += elements.c
+libwallycore_la_INCLUDES += include/wally_elements.h
+endif
 
 TESTS =
 noinst_PROGRAMS =
diff -Naur a/src/wrap_js/binding.gyp.tmpl b/src/wrap_js/binding.gyp.tmpl
--- a/src/wrap_js/binding.gyp.tmpl	2019-04-19 14:50:31.000000000 +0000
+++ b/src/wrap_js/binding.gyp.tmpl	2019-04-23 19:29:16.000000000 +0000
@@ -4,7 +4,7 @@
       "target_name": "deps",
       "sources": [ "src/combined.c", "src/combined_ccan.c", "src/combined_ccan2.c" ],
       "defines": [ "SWIG_JAVASCRIPT_BUILD", "HAVE_CONFIG_H" ],
-      "include_dirs": [ "<(platform_include_dirs)", "<(libwally_dir)", "<(libwally_dir)/src", "<(libwally_dir)/src/secp256k1", "<(libwally_dir)/src/secp256k1/src", "<(libwally_dir)/src/ccan" ],
+      "include_dirs": [ "<(platform_include_dirs)", "<(libwally_dir)", "<(libwally_dir)/src", "<(libwally_dir)/src/ccan" ],
       "type": "static_library"
     },
     {
