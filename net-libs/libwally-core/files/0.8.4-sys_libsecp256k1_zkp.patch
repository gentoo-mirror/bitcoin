diff -Naur a/configure.ac b/configure.ac
--- a/configure.ac	2021-10-19 21:16:14.000000000 +0000
+++ b/configure.ac	2021-10-20 17:54:35.000000000 +0000
@@ -277,29 +277,21 @@
     AC_CHECK_HEADERS([asm/page.h])
 fi
 
-#
-# libsecp256k1
-#
-# FIXME: This is needed to force libtool to use all object files from secp.
-#        We can only build secp properly by recursively invoking
-#        configure/make, and can't include it as a noinst_ library. Libtool
-#        assumes that such libraries will be installed along with our library
-#        target and so won't force all object files in the library to be
-#        included in ours - despite the fact that we are making a shared
-#        library and linking to a static one. This is broken and we work
-#        around it by hacking the whole-archive flags into the _LDADD variable
-#        for wallycore.
-#        Because automake tries to police its users very strictly and fails
-#        hard when flags are passed in this way, we have to substitute the
-#        flags here.
-#        Because libtool both intercepts -Wl and arbitrarily re-orders its
-#        command line inputs, we have to concoct a single expression to
-#        enforce linking that cannot be split, hence the below expression.
-LIBADD_SECP256K1="secp256k1/.libs/libsecp256k1.a"
-if test "x$whole_archive" == "xyes"; then
-    LIBADD_SECP256K1="-Wl,--whole-archive,secp256k1/.libs/libsecp256k1.a,--no-whole-archive"
-fi
+PKG_CHECK_MODULES([libsecp256k1],[libsecp256k1_zkp],[])
+saved_LIBS=$LIBS
+LIBS="$libsecp256k1_LIBS $LIBS"
+AC_CHECK_FUNCS([secp256k1_ecdh secp256k1_ecdsa_s2c_sign secp256k1_ecdsa_recoverable_signature_parse_compact],[],[
+	AC_MSG_ERROR([libsecp256k1_zkp does not support required ecdh, ecdsa-s2c, and recovery modules])
+])
+AS_IF([test "x$elements" = "xyes"],[
+	AC_CHECK_FUNCS([secp256k1_generator_parse secp256k1_pedersen_commitment_parse secp256k1_surjectionproof_initialize secp256k1_whitelist_sign],[],[
+		AC_MSG_ERROR([libsecp256k1_zkp does not support generator, rangeproof, surjectionproof, and whitelist modules; required for Elements asset support (you specified --enable-elements)])
+	])
+])
+LIBS=$saved_LIBS
+LIBADD_SECP256K1="${libsecp256k1_LIBS}"
 AC_SUBST([LIBADD_SECP256K1])
+AC_SUBST([libsecp256k1_CFLAGS])
 
 #
 # Python facilities
@@ -449,7 +441,6 @@
 export LD
 export LDFLAGS
 ac_configure_args="${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-experimental --enable-module-ecdh --enable-module-recovery --enable-module-ecdsa-s2c --enable-module-rangeproof --enable-module-surjectionproof --enable-module-whitelist --enable-module-generator ${secp256k1_test_opt} --enable-openssl-tests=no --enable-exhaustive-tests=no --enable-benchmark=no --disable-dependency-tracking ${secp_asm}"
-AC_CONFIG_SUBDIRS([src/secp256k1])
 
 
 AC_OUTPUT
diff -Naur a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am	2021-10-19 21:16:14.000000000 +0000
+++ b/src/Makefile.am	2021-10-20 17:55:13.000000000 +0000
@@ -14,7 +14,6 @@
 include_HEADERS += $(top_srcdir)/include/wally_bip39.h
 include_HEADERS += $(top_srcdir)/include/wally_core.h
 include_HEADERS += $(top_srcdir)/include/wally_crypto.h
-include_HEADERS += $(top_srcdir)/include/wally_elements.h
 include_HEADERS += $(top_srcdir)/include/wally_psbt.h
 include_HEADERS += $(top_srcdir)/include/wally_script.h
 include_HEADERS += $(top_srcdir)/include/wally_symmetric.h
@@ -191,7 +190,6 @@
     bip39.c \
     bech32.c \
     ecdh.c \
-    elements.c \
     blech32.c \
     hex.c \
     hmac.c \
@@ -221,7 +219,6 @@
     include/wally_bip39.h \
     include/wally_core.h \
     include/wally_crypto.h \
-    include/wally_elements.h \
     include/wally_psbt.h \
     include/wally_script.h \
     include/wally_symmetric.h \
@@ -235,10 +232,14 @@
 endif
 endif # SHARED_BUILD_ENABLED
 
-libwallycore_la_CFLAGS = -I$(top_srcdir) -I$(srcdir)/ccan -DWALLY_CORE_BUILD=1 $(AM_CFLAGS)
+libwallycore_la_CFLAGS = -I$(top_srcdir) -I$(srcdir)/ccan -DWALLY_CORE_BUILD=1 $(AM_CFLAGS) $(libsecp256k1_CFLAGS)
 libwallycore_la_LIBADD = $(LIBADD_SECP256K1) $(noinst_LTLIBRARIES)
 
-SUBDIRS = secp256k1
+if BUILD_ELEMENTS
+include_HEADERS += $(top_srcdir)/include/wally_elements.h
+libwallycore_la_SOURCES += elements.c
+libwallycore_la_INCLUDES += include/wally_elements.h
+endif
 
 TESTS =
 noinst_PROGRAMS =
diff -Naur a/src/wrap_js/binding.gyp.tmpl b/src/wrap_js/binding.gyp.tmpl
--- a/src/wrap_js/binding.gyp.tmpl	2021-10-19 21:16:14.000000000 +0000
+++ b/src/wrap_js/binding.gyp.tmpl	2021-10-20 17:54:11.000000000 +0000
@@ -4,7 +4,7 @@
       "target_name": "deps",
       "sources": [ "src/combined.c", "src/combined_ccan.c", "src/combined_ccan2.c" ],
       "defines": [ "SWIG_JAVASCRIPT_BUILD", "HAVE_CONFIG_H" ],
-      "include_dirs": [ "<(platform_include_dirs)", "<(libwally_dir)", "<(libwally_dir)/src", "<(libwally_dir)/src/secp256k1", "<(libwally_dir)/src/secp256k1/src", "<(libwally_dir)/src/ccan" ],
+      "include_dirs": [ "<(platform_include_dirs)", "<(libwally_dir)", "<(libwally_dir)/src", "<(libwally_dir)/src/ccan" ],
       "type": "static_library"
     },
     {
