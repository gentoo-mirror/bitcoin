diff --git a/CMakeLists.txt b/CMakeLists.txt
index 73709b8..d183600 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,10 @@
-cmake_minimum_required(VERSION 3.18)
+cmake_minimum_required(VERSION 3.23)
 project(nunchuk VERSION 0.1.0)
 
+include(GNUInstallDirs)
+
+find_package(PkgConfig)
+
 configure_file(src/config.h.in nunchuk-config.h)
 
 set(CMAKE_CXX_STANDARD 20)
@@ -8,9 +12,6 @@ set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS OFF)
 set(CMAKE_INCLUDE_DIRECTORIES_BEFORE ON)
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
-set(Boost_USE_STATIC_LIBS ON)
-set(OPENSSL_USE_STATIC_LIBS ON)
-set(UR__DISABLE_TESTS ON)
 set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
 
 if(ANDROID)
@@ -50,37 +51,37 @@ elseif(IOS)
     add_library(libevent::libevent ALIAS event_extra_static)
     add_library(libevent::pthreads ALIAS event_pthreads_static)
 else()
-    find_library(event_lib NAMES libevent.a event REQUIRED)
-    add_library(libevent::libevent STATIC IMPORTED)
-    set_target_properties(libevent::libevent PROPERTIES IMPORTED_LOCATION ${event_lib})
+	pkg_check_modules(LIBEVENT REQUIRED IMPORTED_TARGET libevent)
+	add_library(libevent::libevent ALIAS PkgConfig::LIBEVENT)
 
   if (NOT WIN32)
-    find_library(event_pthreads_lib NAMES libevent_pthreads.a event_pthreads REQUIRED)
-    add_library(libevent::pthreads STATIC IMPORTED)
-    set_target_properties(libevent::pthreads PROPERTIES IMPORTED_LOCATION ${event_pthreads_lib})
+	pkg_check_modules(LIBEVENT_PTHREADS REQUIRED IMPORTED_TARGET libevent_pthreads)
+	add_library(libevent::pthreads ALIAS PkgConfig::LIBEVENT_PTHREADS)
   endif()
 endif()
 
 find_package(OpenSSL REQUIRED)
 find_package(Threads REQUIRED)
 
-add_subdirectory(contrib/sqlite)
-add_library(SQLite::SQLite3 ALIAS sqlcipher)
-set(SQLite3_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/contrib/sqlite/sqlcipher)
-set(SQLite3_LIBRARY sqlcipher)
+pkg_check_modules(SQLCIPHER REQUIRED IMPORTED_TARGET sqlcipher)
+add_library(sqlcipher ALIAS PkgConfig::SQLCIPHER)
+add_library(SQLite::SQLite3 ALIAS PkgConfig::SQLCIPHER)
+set(SQLite3_INCLUDE_DIR ${SQLCIPHER_INCLUDE_DIRS})
+set(SQLite3_LIBRARY ${SQLCIPHER_LIBRARIES})
 
 set(BUILD_DAEMON OFF)
 set(BUILD_TESTS OFF)
+set(INSTALL_MAN OFF)
 set(HAVE_IFADDRS_H FALSE)
 cmake_policy(SET CMP0077 NEW)
-set(SECP256K1_ENABLE_MODULE_ECDH ON)
 set(BUILD_CLI OFF)
+set(WITH_BDB OFF)
+set(WITH_SYSTEM_LIBSECP256K1 ON)
 add_subdirectory(contrib/bitcoin)
 
 add_subdirectory(embedded)
 
-set(UR__DISABLE_TESTS ON)
-add_subdirectory(contrib/bc-ur-cpp)
+include(${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/ur/ur.cmake)
 
 add_library(trezor-crypto STATIC
     "contrib/trezor-firmware/crypto/bip39.c"
@@ -93,7 +94,7 @@ add_library(trezor-crypto STATIC
     "contrib/trezor-firmware/crypto/aes/aeskey.c"
     "contrib/trezor-firmware/crypto/aes/aestab.c"
 )
-
+target_compile_options(trezor-crypto PRIVATE -fPIC)
 target_include_directories(trezor-crypto PUBLIC
     "${PROJECT_SOURCE_DIR}/contrib/trezor-firmware/crypto"
 )
@@ -114,30 +115,12 @@ if(WIN32)
     endif()
 endif()
 
-add_library(ur-2 STATIC
-    "contrib/bc-ur-2/src/crc32.c"
-    "contrib/bc-ur-2/src/memzero.c"
-    "contrib/bc-ur-2/src/sha2.c"
-    "contrib/bc-ur-2/src/bytewords.cpp"
-    "contrib/bc-ur-2/src/fountain-decoder.cpp"
-    "contrib/bc-ur-2/src/fountain-encoder.cpp"
-    "contrib/bc-ur-2/src/fountain-utils.cpp"
-    "contrib/bc-ur-2/src/random-sampler.cpp"
-    "contrib/bc-ur-2/src/ur-decoder.cpp"
-    "contrib/bc-ur-2/src/ur-encoder.cpp"
-    "contrib/bc-ur-2/src/ur.cpp"
-    "contrib/bc-ur-2/src/utils.cpp"
-    "contrib/bc-ur-2/src/xoshiro256.cpp"
-)
+pkg_check_modules(BC_UR REQUIRED IMPORTED_TARGET libbc-ur)
+add_library(ur-2 ALIAS PkgConfig::BC_UR)
 
-find_package(Boost 1.47.0 REQUIRED)
+find_package(Boost 1.47.0 REQUIRED COMPONENTS process)
 
-target_include_directories(ur-2 PUBLIC
-    "${PROJECT_SOURCE_DIR}/contrib/bc-ur-2/src"
-    "${PROJECT_SOURCE_DIR}/contrib/bitcoin/depends/${ANDROID_TARGET}/include"
-)
-
-add_library("${PROJECT_NAME}" STATIC 
+add_library("${PROJECT_NAME}"
     src/hwiservice.cpp 
     src/groupservice.cpp
     src/selector.cpp 
@@ -195,6 +178,22 @@ add_library("${PROJECT_NAME}" STATIC
     src/utils/tweetnacl.c
 )
 
+target_sources(${PROJECT_NAME} PUBLIC FILE_SET HEADERS
+	BASE_DIRS
+		contrib/bitcoin/src
+		include
+		src
+	FILES
+		contrib/bitcoin/src/tinyformat.h
+		include/nunchuk.h
+		include/nunchukmatrix.h
+		src/utils/bip32.hpp
+		src/utils/enumconverter.hpp
+		src/utils/errorutils.hpp
+		src/utils/loguru.hpp
+		src/utils/rfc2440.hpp
+)
+
 set(PROJECT_LIBRARIES
     ur
     ur-2
@@ -211,40 +210,45 @@ if(WIN32)
 elseif(APPLE)
     set(PROJECT_LIBRARIES sqlcipher ${PROJECT_LIBRARIES})
 elseif(UNIX)
+	target_link_options(${PROJECT_NAME} PRIVATE LINKER:-z,defs)
     set(PROJECT_LIBRARIES sqlcipher ${PROJECT_LIBRARIES} dl)
 endif()
 
-set(BUILD_SHARED_LIB_TAPPROTOCOL OFF)
-set(BUILD_TESTING OFF)
-add_subdirectory(contrib/tap-protocol)
-# Pass Bitcoin random to tap-protocol
-target_compile_definitions(tap-protocol PUBLIC LIB_TAPPROTOCOL_USE_BITCOIN_RANDOM=1)
-# Allow testnet Tapsigner
-target_compile_definitions(tap-protocol PUBLIC SKIP_BASE58_PREFIX_CHECK=1)
+include(${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/tap-protocol/tap-protocol.cmake)
 
-set(BBQR_BUILD_EXAMPLES OFF)
-set(BUILD_SHARED_LIBS OFF)
-add_subdirectory(contrib/bbqr-cpp)
+include(${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/bbqr-cpp/bbqr-cpp.cmake)
 
 if(ANDROID)
     target_link_libraries("${PROJECT_NAME}" PUBLIC -Wl,--start-group embedded ${PROJECT_LIBRARIES} trezor-crypto -Wl,--end-group tap-protocol bbqr-cpp)
 else()
-    target_link_libraries("${PROJECT_NAME}" PUBLIC embedded ${PROJECT_LIBRARIES} trezor-crypto tap-protocol bbqr-cpp)
+    target_link_libraries("${PROJECT_NAME}" PRIVATE embedded ${PROJECT_LIBRARIES} trezor-crypto tap-protocol bbqr-cpp)
 endif()
 
-target_include_directories("${PROJECT_NAME}" PUBLIC 
-    "${PROJECT_SOURCE_DIR}/src"
-    "${PROJECT_SOURCE_DIR}/include"
-    ${Boost_INCLUDE_DIRS}
-    ${OPENSSL_INCLUDE_DIR}
-    "${PROJECT_SOURCE_DIR}/contrib"
-    "${PROJECT_SOURCE_DIR}/contrib/sqlite"
-    "${PROJECT_BINARY_DIR}"
-    "${PROJECT_BINARY_DIR}/contrib/bitcoin/src"
-    "${PROJECT_SOURCE_DIR}/contrib/tap-protocol/include"
-    "${PROJECT_SOURCE_DIR}/contrib/bbqr-cpp/include"
+target_include_directories(${PROJECT_NAME}
+	PUBLIC
+		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+		$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+	PRIVATE
+		$<BUILD_INTERFACE:
+			${CMAKE_CURRENT_SOURCE_DIR}/src
+			${Boost_INCLUDE_DIRS}
+			${OPENSSL_INCLUDE_DIR}
+			${CMAKE_CURRENT_BINARY_DIR}/contrib/bitcoin/src
+		>
+)
+target_link_libraries(${PROJECT_NAME}
+	PRIVATE
+		Boost::process
 )
 
 set(CPACK_PROJECT_NAME ${PROJECT_NAME})
 set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
 include(CPack)
+
+install(
+	TARGETS ${PROJECT_NAME}
+	EXPORT ${PROJECT_NAME}
+	FILE_SET HEADERS
+		DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
+)
+install(EXPORT ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
diff --git a/embedded/CMakeLists.txt b/embedded/CMakeLists.txt
index c936192..ba6de07 100644
--- a/embedded/CMakeLists.txt
+++ b/embedded/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.1)
+cmake_minimum_required(VERSION 3.5)
 project(embedded VERSION 0.1.0)
 
 set(CMAKE_CXX_STANDARD 20)
@@ -20,6 +20,9 @@ set(Bitcoin_LIBRARIES
 	univalue
 )
 
+pkg_check_modules(LIBSECP256K1 REQUIRED IMPORTED_TARGET libsecp256k1>=0.2.0)
+add_library(secp256k1 ALIAS PkgConfig::LIBSECP256K1)
+
 set(Bitcoin_INCLUDE_DIRS
     ${PROJECT_SOURCE_DIR}/../contrib/bitcoin/build/src
     ${PROJECT_SOURCE_DIR}/../contrib/bitcoin/src
@@ -34,13 +37,15 @@ set(PROJECT_LIBRARIES
     ${Boost_LIBRARIES}
 )
 
+target_compile_options(${PROJECT_NAME} PRIVATE -fPIC)
 target_link_libraries("${PROJECT_NAME}" PRIVATE ${PROJECT_LIBRARIES})
 
-target_include_directories("${PROJECT_NAME}" PUBLIC 
-    "${PROJECT_SOURCE_DIR}"
-    ${Bitcoin_INCLUDE_DIRS}
-    ${Boost_INCLUDE_DIRS}
-    "${PROJECT_SOURCE_DIR}/../contrib/bitcoin/src/secp256k1/include"
-    "${PROJECT_BINARY_DIR}/../contrib/bitcoin/src"
-    "${PROJECT_SOURCE_DIR}/../contrib/bitcoin/depends/${ANDROID_TARGET}/include"
+target_include_directories(${PROJECT_NAME}
+	PUBLIC
+		${CMAKE_CURRENT_SOURCE_DIR}
+		${Bitcoin_INCLUDE_DIRS}
+	PRIVATE
+		${Boost_INCLUDE_DIRS}
+		${CMAKE_SOURCE_DIR}/contrib/bitcoin/depends/${ANDROID_TARGET}/include
+		${CMAKE_BINARY_DIR}/contrib/bitcoin/src
 )
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index e96a161..c4c673c 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.1)
+cmake_minimum_required(VERSION 3.5)
 project(nunchuk-examples VERSION 0.1.0)
 
 set(CMAKE_CXX_STANDARD 20)
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 51b5789..2c22720 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.1)
+cmake_minimum_required(VERSION 3.5)
 project(test-nunchuk)
 
 enable_testing()
