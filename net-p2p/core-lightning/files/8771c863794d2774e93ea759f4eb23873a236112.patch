--- /var/cache/distfiles/8771c863794d2774e93ea759f4eb23873a236112.patch	2022-12-02 22:04:16.518505869 -0500
+++ /var/tmp/portage/net-p2p/core-lightning-0.11.2-r111/temp/8771c863794d2774e93ea759f4eb23873a236112.patch	2022-12-03 01:10:34.197258979 -0500
@@ -164,7 +164,19 @@
 +	/* Now, try to pull data out. */
 +	cursor = paddedheader;
 +	max = tal_bytelen(msg->routinginfo);
-+
+ 
+-	/* Can't decode?  Treat it as terminal. */
+-	if (!valid) {
+-		shift_size = payload_size;
+-		memset(step->next->hmac.bytes, 0, sizeof(step->next->hmac.bytes));
+-	} else {
+-		assert(payload_size <= tal_bytelen(msg->routinginfo) - HMAC_SIZE);
+-		/* Copy hmac */
+-		shift_size = payload_size + HMAC_SIZE;
+-		memcpy(step->next->hmac.bytes,
+-		       paddedheader + payload_size, HMAC_SIZE);
+-	}
+-	step->raw_payload = tal_dup_arr(step, u8, paddedheader, payload_size, 0);
 +	/* Any of these could fail, falling thru with cursor == NULL */
 +	payload_size = fromwire_bigsize(&cursor, &max);
 +	/* FIXME: raw_payload *includes* the length, which is redundant and
@@ -181,19 +193,7 @@
 +	 * use). */
 +	if (payload_size < 2 || !cursor)
 +		return tal_free(step);
- 
--	/* Can't decode?  Treat it as terminal. */
--	if (!valid) {
--		shift_size = payload_size;
--		memset(step->next->hmac.bytes, 0, sizeof(step->next->hmac.bytes));
--	} else {
--		assert(payload_size <= tal_bytelen(msg->routinginfo) - HMAC_SIZE);
--		/* Copy hmac */
--		shift_size = payload_size + HMAC_SIZE;
--		memcpy(step->next->hmac.bytes,
--		       paddedheader + payload_size, HMAC_SIZE);
--	}
--	step->raw_payload = tal_dup_arr(step, u8, paddedheader, payload_size, 0);
++
 +	/* This includes length field and hmac */
 +	shift_size = cursor - paddedheader;
  
@@ -286,12 +286,12 @@
   * failed immediately. */
  static void rcvd_htlc_reply(struct subd *subd, const u8 *msg, const int *fds UNUSED,
 @@ -539,7 +524,7 @@ static void rcvd_htlc_reply(struct subd *subd, const u8 *msg, const int *fds UNU
- 			 * so set htlc field with NULL (db wants it to exist!) */
+ 			 * so set htlc field with NULL */
  			wallet_forwarded_payment_add(ld->wallet,
  					 hout->in,
 -					 get_onion_style(hout->in),
 +					 FORWARD_STYLE_TLV,
- 					 channel_scid_or_local_alias(hout->key.channel), NULL,
+ 					 NULL, NULL,
  					 FORWARD_LOCAL_FAILED,
  						     fromwire_peektype(hout->failmsg));
 @@ -713,7 +698,7 @@ static void forward_htlc(struct htlc_in *hin,
@@ -331,7 +331,7 @@
  		wallet_forwarded_payment_add(ld->wallet, hout->in,
 -					     get_onion_style(hout->in),
 +					     FORWARD_STYLE_TLV,
- 					     channel_scid_or_local_alias(hout->key.channel), hout,
+ 					     hout->key.channel->scid, hout,
  					     FORWARD_SETTLED, 0);
  	}
 @@ -1534,7 +1515,7 @@ static bool peer_failed_our_htlc(struct channel *channel,
@@ -340,7 +340,7 @@
  		wallet_forwarded_payment_add(ld->wallet, hout->in,
 -					     get_onion_style(hout->in),
 +					     FORWARD_STYLE_TLV,
- 					     channel_scid_or_local_alias(channel),
+ 					     channel->scid,
  					     hout, FORWARD_FAILED,
  					     hout->failmsg
 @@ -1697,7 +1678,7 @@ void onchain_failed_our_htlc(const struct channel *channel,
@@ -349,7 +349,7 @@
  		wallet_forwarded_payment_add(hout->key.channel->peer->ld->wallet,
 -					 hout->in, get_onion_style(hout->in),
 +					 hout->in, FORWARD_STYLE_TLV,
- 					 channel_scid_or_local_alias(channel), hout,
+ 					 channel->scid, hout,
  					 FORWARD_LOCAL_FAILED,
  					 hout->failmsg
 @@ -1864,7 +1845,7 @@ static bool update_out_htlc(struct channel *channel,
@@ -358,7 +358,7 @@
  			wallet_forwarded_payment_add(ld->wallet, hout->in,
 -						     get_onion_style(hout->in),
 +						     FORWARD_STYLE_TLV,
- 						     channel_scid_or_local_alias(channel), hout,
+ 						     channel->scid, hout,
  						     FORWARD_OFFERED, 0);
  		}
 diff --git a/wallet/wallet.h b/wallet/wallet.h
