--- /var/cache/distfiles/d9e274cee2610f8c8881ec70ab5e3b944e1ea988.patch	2023-04-16 01:06:57.240849027 -0400
+++ /var/tmp/portage/net-p2p/core-lightning-0.12.1-r106/temp/d9e274cee2610f8c8881ec70ab5e3b944e1ea988.patch	2023-04-16 23:40:42.981192478 -0400
@@ -18,7 +18,7 @@
 --- a/db/bindings.c
 +++ b/db/bindings.c
 @@ -159,8 +159,8 @@ void db_bind_pubkey(struct db_stmt *stmt, int pos, const struct pubkey *pk)
- 	db_bind_blob(stmt, pos, der, PUBKEY_CMPR_LEN);
+ 	db_bind_text(stmt, col, ser);
  }
  
 -void db_bind_scid(struct db_stmt *stmt, int col,
@@ -29,7 +28,7 @@
  	db_bind_u64(stmt, col, id->u64);
  }
 @@ -361,8 +361,8 @@ void db_col_pubkey(struct db_stmt *stmt,
- 	assert(ok);
+ 	return short_channel_id_from_str(source, sourcelen, dest);
  }
  
 -void db_col_scid(struct db_stmt *stmt, const char *colname,
@@ -44,9 +43,9 @@
 --- a/db/bindings.h
 +++ b/db/bindings.h
 @@ -37,8 +37,8 @@ void db_bind_node_id(struct db_stmt *stmt, int pos, const struct node_id *ni);
- void db_bind_node_id_arr(struct db_stmt *stmt, int col,
- 			 const struct node_id *ids);
- void db_bind_pubkey(struct db_stmt *stmt, int pos, const struct pubkey *p);
+ /* DO NOT USE, deprecated! */
+ void db_bind_short_channel_id_str(struct db_stmt *stmt, int col,
+ 				  const struct short_channel_id *id);
 -void db_bind_scid(struct db_stmt *stmt, int col,
 -		  const struct short_channel_id *id);
 +void db_bind_short_channel_id(struct db_stmt *stmt, int col,
@@ -55,9 +54,9 @@
  				  const struct short_channel_id *id);
  void db_bind_signature(struct db_stmt *stmt, int col,
 @@ -83,8 +83,8 @@ struct node_id *db_col_node_id_arr(const tal_t *ctx, struct db_stmt *stmt,
- 				   const char *colname);
- void db_col_pubkey(struct db_stmt *stmt, const char *colname,
- 		   struct pubkey *p);
+ /* DO NOT USE: deprecated */
+ bool db_col_short_channel_id_str(struct db_stmt *stmt, const char *colname,
+ 				struct short_channel_id *dest);
 -void db_col_scid(struct db_stmt *stmt, const char *colname,
 -		 struct short_channel_id *dest);
 +void db_col_short_channel_id(struct db_stmt *stmt, const char *colname,
@@ -69,15 +68,7 @@
 index 3a07d14d33ed3bc8b1aa4c88a337924b976b14b8..5506c63be260c805b4dd3e22e8af03485082bb4e 100644
 --- a/wallet/wallet.c
 +++ b/wallet/wallet.c
-@@ -1317,21 +1317,21 @@ static struct channel *wallet_stmt2channel(struct wallet *w, struct db_stmt *stm
- 
- 	if (!db_col_is_null(stmt, "scid")) {
- 		scid = tal(tmpctx, struct short_channel_id);
--		db_col_scid(stmt, "scid", scid);
-+		db_col_short_channel_id(stmt, "scid", scid);
- 	} else {
- 		scid = NULL;
- 	}
+@@ -1301,14 +1301,14 @@ static struct channel *wallet_stmt2channel(struct wallet *w, struct db_stmt *stm
  
  	if (!db_col_is_null(stmt, "alias_local")) {
  		alias[LOCAL] = tal(tmpctx, struct short_channel_id);
@@ -116,15 +85,6 @@
  	} else {
  		alias[REMOTE] = NULL;
  	}
-@@ -1928,7 +1928,7 @@ void wallet_channel_save(struct wallet *w, struct channel *chan)
- 					" WHERE id=?")); // 46
- 	db_bind_u64(stmt, 0, chan->their_shachain.id);
- 	if (chan->scid)
--		db_bind_scid(stmt, 1, chan->scid);
-+		db_bind_short_channel_id(stmt, 1, chan->scid);
- 	else
- 		db_bind_null(stmt, 1);
- 
 @@ -1995,12 +1995,12 @@ void wallet_channel_save(struct wallet *w, struct channel *chan)
  	db_bind_amount_msat(stmt, 43, &chan->htlc_maximum_msat);
  
@@ -140,33 +100,6 @@
  	else
  		db_bind_null(stmt, 45);
  
-@@ -3482,7 +3482,7 @@ void wallet_payment_get_failinfo(const tal_t *ctx,
- 		*failchannel = NULL;
- 	} else {
- 		*failchannel = tal(ctx, struct short_channel_id);
--		db_col_scid(stmt, "failscid", *failchannel);
-+		db_col_short_channel_id(stmt, "failscid", *failchannel);
- 
- 		/* For pre-0.6.2 dbs, direction will be 0 */
- 		*faildirection = db_col_int(stmt, "faildirection");
-@@ -3541,7 +3541,7 @@ void wallet_payment_set_failinfo(struct wallet *wallet,
- 		db_bind_null(stmt, 4);
- 
- 	if (failchannel) {
--		db_bind_scid(stmt, 5, failchannel);
-+		db_bind_short_channel_id(stmt, 5, failchannel);
- 		db_bind_int(stmt, 8, faildirection);
- 	} else {
- 		db_bind_null(stmt, 5);
-@@ -4379,7 +4379,7 @@ static bool wallet_forwarded_payment_update(struct wallet *w,
- 	else
- 		db_bind_int(stmt, 5, forward_style_in_db(forward_style));
- 	db_bind_u64(stmt, 6, in->key.id);
--	db_bind_scid(stmt, 7, channel_scid_or_local_alias(in->key.channel));
-+	db_bind_short_channel_id(stmt, 7, channel_scid_or_local_alias(in->key.channel));
- 	db_exec_prepared_v2(stmt);
- 	changed = db_count_changes(stmt) != 0;
- 	tal_free(stmt);
 @@ -4439,10 +4439,10 @@ void wallet_forwarded_payment_add(struct wallet *w, const struct htlc_in *in,
  	 * the sender used to specify the channel, but that's under
  	 * control of the remote end. */
@@ -198,17 +131,13 @@
  	} else {
  		// any out_channel
  		db_bind_int(stmt, 4, 1);
-@@ -4615,7 +4615,7 @@ const struct forwarding *wallet_forwarded_payments_get(struct wallet *w,
- 			cur->fee =  AMOUNT_MSAT(0);
+@@ -4564,11 +4564,11 @@ const struct forwarding *wallet_forwarded_payments_get(struct wallet *w,
+ 			cur->payment_hash = NULL;
  		}
  
 -		db_col_scid(stmt, "in_channel_scid", &cur->channel_in);
 +		db_col_short_channel_id(stmt, "in_channel_scid", &cur->channel_in);
- 
- #ifdef COMPAT_V0121
- 		/* This can happen due to migration! */
-@@ -4628,7 +4628,7 @@ const struct forwarding *wallet_forwarded_payments_get(struct wallet *w,
- #endif
+ 		cur->htlc_id_in = db_col_u64(stmt, "in_htlc_id");
  
  		if (!db_col_is_null(stmt, "out_channel_scid")) {
 -			db_col_scid(stmt, "out_channel_scid", &cur->channel_out);
@@ -216,51 +145,6 @@
  		} else {
  			assert(cur->status == FORWARD_LOCAL_FAILED);
  			cur->channel_out.u64 = 0;
-@@ -4685,7 +4685,7 @@ bool wallet_forward_delete(struct wallet *w,
- 							" WHERE in_channel_scid = ?"
- 							" AND in_htlc_id = ?"
- 							" AND state = ?;"));
--			db_bind_scid(stmt, 0, chan_in);
-+			db_bind_short_channel_id(stmt, 0, chan_in);
- 			db_bind_u64(stmt, 1, *htlc_id);
- 			db_bind_int(stmt, 2, wallet_forward_status_in_db(FORWARD_SETTLED));
- 		} else {
-@@ -4695,7 +4695,7 @@ bool wallet_forward_delete(struct wallet *w,
- 							" WHERE in_channel_scid = ?"
- 							" AND in_htlc_id IS NULL"
- 							" AND state = ?;"));
--			db_bind_scid(stmt, 0, chan_in);
-+			db_bind_short_channel_id(stmt, 0, chan_in);
- 			db_bind_int(stmt, 1, wallet_forward_status_in_db(FORWARD_SETTLED));
- 		}
- 		db_query_prepared(stmt);
-@@ -4718,7 +4718,7 @@ bool wallet_forward_delete(struct wallet *w,
- 					 " WHERE in_channel_scid = ?"
- 					 " AND in_htlc_id = ?"
- 					 " AND state = ?"));
--		db_bind_scid(stmt, 0, chan_in);
-+		db_bind_short_channel_id(stmt, 0, chan_in);
- 		db_bind_u64(stmt, 1, *htlc_id);
- 		db_bind_int(stmt, 2, wallet_forward_status_in_db(state));
- 	} else {
-@@ -4727,7 +4727,7 @@ bool wallet_forward_delete(struct wallet *w,
- 					 " WHERE in_channel_scid = ?"
- 					 " AND in_htlc_id IS NULL"
- 					 " AND state = ?"));
--		db_bind_scid(stmt, 0, chan_in);
-+		db_bind_short_channel_id(stmt, 0, chan_in);
- 		db_bind_int(stmt, 1, wallet_forward_status_in_db(state));
- 	}
- 	db_exec_prepared_v2(stmt);
-@@ -4822,7 +4822,7 @@ struct wallet_transaction *wallet_transactions_get(struct wallet *w, const tal_t
- 		got_ann:
- 			ann->type = db_col_int(stmt, "annotation_type");
- 			if (!db_col_is_null(stmt, "c.scid"))
--				db_col_scid(stmt, "c.scid", &ann->channel);
-+				db_col_short_channel_id(stmt, "c.scid", &ann->channel);
- 			else
- 				ann->channel.u64 = 0;
- 		} else {
 @@ -5453,9 +5453,9 @@ struct wallet_htlc_iter *wallet_htlcs_next(struct wallet *w,
  		*scid = iter->scid;
  	else {
