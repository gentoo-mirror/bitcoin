--- /var/cache/distfiles/64b1ddd761de30152154714433974b72bfb7f278.patch	2023-04-16 01:07:28.062162087 -0400
+++ /var/tmp/portage/net-p2p/core-lightning-0.11.2-r117/temp/64b1ddd761de30152154714433974b72bfb7f278.patch	2023-04-17 22:42:31.453041658 -0400
@@ -980,16 +977,13 @@
  			    json_tok_full_len(tok), json_tok_full(buffer, tok));
  }
  
--struct command_result *param_feerate(struct command *cmd, const char *name,
--				     const char *buffer, const jsmntok_t *tok,
--				     u32 **feerate)
 +/* This can set **feerate to 0, if it's unknown. */
 +static struct command_result *param_feerate_unchecked(struct command *cmd,
 +						      const char *name,
 +						      const char *buffer,
 +						      const jsmntok_t *tok,
 +						      u32 **feerate)
- {
++{
 +	*feerate = tal(cmd, u32);
 +
 +	if (json_tok_streq(buffer, tok, "opening")) {
@@ -1010,9 +1004,7 @@
 +	}
 +
 +	/* Other names are deprecated */
- 	for (size_t i = 0; i < NUM_FEERATES; i++) {
--		if (json_tok_streq(buffer, tok, feerate_name(i)))
--			return param_feerate_estimate(cmd, feerate, i);
++	for (size_t i = 0; i < NUM_FEERATES; i++) {
 +		bool unknown;
 +
 +		if (!json_tok_streq(buffer, tok, feerate_name(i)))
@@ -1045,17 +1037,11 @@
 +			return NULL;
 +		}
 +		abort();
- 	}
++	}
 +
- 	/* We used SLOW, NORMAL, and URGENT as feerate targets previously,
- 	 * and many commands rely on this syntax now.
- 	 * It's also really more natural for an user interface. */
--	if (json_tok_streq(buffer, tok, "slow"))
--		return param_feerate_estimate(cmd, feerate, FEERATE_MIN);
--	else if (json_tok_streq(buffer, tok, "normal"))
--		return param_feerate_estimate(cmd, feerate, FEERATE_OPENING);
--	else if (json_tok_streq(buffer, tok, "urgent"))
--		return param_feerate_estimate(cmd, feerate, FEERATE_UNILATERAL_CLOSE);
++	/* We used SLOW, NORMAL, and URGENT as feerate targets previously,
++	 * and many commands rely on this syntax now.
++	 * It's also really more natural for an user interface. */
 +	if (json_tok_streq(buffer, tok, "slow")) {
 +		**feerate = feerate_for_deadline(cmd->ld->topology, 100);
 +		return NULL;
@@ -1066,29 +1052,46 @@
 +		**feerate = feerate_for_deadline(cmd->ld->topology, 6);
 +		return NULL;
 +	}
- 
- 	/* It's a number... */
++
++	/* It's a number... */
 +	tal_free(*feerate);
- 	return param_feerate_val(cmd, name, buffer, tok, feerate);
- }
++	return param_feerate_val(cmd, name, buffer, tok, feerate);
++}
++
+ struct command_result *param_feerate(struct command *cmd, const char *name,
+ 				     const char *buffer, const jsmntok_t *tok,
+ 				     u32 **feerate)
+ {
+-	for (size_t i = 0; i < NUM_FEERATES; i++) {
+-		if (json_tok_streq(buffer, tok, feerate_name(i)))
+-			return param_feerate_estimate(cmd, feerate, i);
+-	}
+-	/* We used SLOW, NORMAL, and URGENT as feerate targets previously,
+-	 * and many commands rely on this syntax now.
+-	 * It's also really more natural for an user interface. */
+-	if (json_tok_streq(buffer, tok, "slow"))
+-		return param_feerate_estimate(cmd, feerate, FEERATE_MIN);
+-	else if (json_tok_streq(buffer, tok, "normal"))
+-		return param_feerate_estimate(cmd, feerate, FEERATE_OPENING);
+-	else if (json_tok_streq(buffer, tok, "urgent"))
+-		return param_feerate_estimate(cmd, feerate, FEERATE_UNILATERAL_CLOSE);
++	struct command_result *ret;
+ 
+-	/* It's a number... */
+-	return param_feerate_val(cmd, name, buffer, tok, feerate);
+-}
++	ret = param_feerate_unchecked(cmd, name, buffer, tok, feerate);
++	if (ret)
++		return ret;
  
 -struct command_result *param_feerate_estimate(struct command *cmd,
 -					      u32 **feerate_per_kw,
 -					      enum feerate feerate)
-+struct command_result *param_feerate(struct command *cmd, const char *name,
-+				     const char *buffer, const jsmntok_t *tok,
-+				     u32 **feerate)
- {
+-{
 -	*feerate_per_kw = tal(cmd, u32);
 -	**feerate_per_kw = try_get_feerate(cmd->ld->topology, feerate);
 -	if (!**feerate_per_kw)
 -		return command_fail(cmd, LIGHTNINGD, "Cannot estimate fees");
-+	struct command_result *ret;
-+
-+	ret = param_feerate_unchecked(cmd, name, buffer, tok, feerate);
-+	if (ret)
-+		return ret;
-+
 +	if (**feerate == 0)
 +		return command_fail(cmd, BCLI_NO_FEE_ESTIMATES,
 +				    "Cannot estimate fees (yet)");
@@ -1115,15 +1118,13 @@
 index 0919a3a935998baa6c5b16b1c4c2b9843d57328b..87475b204f6df682f9e0477504fbc790ab80d377 100644
 --- a/lightningd/test/run-jsonrpc.c
 +++ b/lightningd/test/run-jsonrpc.c
-@@ -13,11 +13,23 @@ void db_begin_transaction_(struct db *db UNNEEDED, const char *location UNNEEDED
+@@ -13,9 +13,21 @@ void db_begin_transaction_(struct db *db UNNEEDED, const char *location UNNEEDED
  /* Generated stub for db_commit_transaction */
  void db_commit_transaction(struct db *db UNNEEDED)
  { fprintf(stderr, "db_commit_transaction called!\n"); abort(); }
 +/* Generated stub for delayed_to_us_feerate */
 +u32 delayed_to_us_feerate(struct chain_topology *topo UNNEEDED)
 +{ fprintf(stderr, "delayed_to_us_feerate called!\n"); abort(); }
- /* Generated stub for deprecated_apis */
- bool deprecated_apis;
  /* Generated stub for fatal */
  void   fatal(const char *fmt UNNEEDED, ...)
  { fprintf(stderr, "fatal called!\n"); abort(); }
@@ -1191,4 +1192,4 @@
 +{ fprintf(stderr, "unilateral_feerate called!\n"); abort(); }
  /* AUTOGENERATED MOCKS END */
  
- static int test_json_filter(void)
+ bool deprecated_apis;
