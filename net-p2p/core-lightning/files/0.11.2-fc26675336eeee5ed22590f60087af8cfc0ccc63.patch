--- /var/cache/distfiles/fc26675336eeee5ed22590f60087af8cfc0ccc63.patch	2023-05-11 14:33:15.660098715 -0400
+++ /var/tmp/portage/net-p2p/core-lightning-0.11.2-r118/temp/fc26675336eeee5ed22590f60087af8cfc0ccc63.patch	2023-05-11 16:19:19.859132366 -0400
@@ -1010,8 +1006,8 @@
 --- a/cln-grpc/src/convert.rs
 +++ b/cln-grpc/src/convert.rs
 @@ -64,7 +64,9 @@ impl From<responses::GetinfoResponse> for pb::GetinfoResponse {
-             blockheight: c.blockheight, // Rule #2 for type u32
-             network: c.network, // Rule #2 for type string
+             #[allow(deprecated)]
+             msatoshi_fees_collected: c.msatoshi_fees_collected, // Rule #2 for type u64?
              fees_collected_msat: Some(c.fees_collected_msat.into()), // Rule #2 for type msat
 +            // Field: Getinfo.address[]
              address: c.address.into_iter().map(|i| i.into()).collect(), // Rule #3 for type GetinfoAddress
@@ -1042,9 +1038,9 @@
              funding: c.funding.map(|v| v.into()),
              to_us_msat: c.to_us_msat.map(|f| f.into()), // Rule #2 for type msat?
 @@ -191,6 +196,7 @@ impl From<responses::ListpeersPeersChannels> for pb::ListpeersPeersChannels {
+             their_to_self_delay: c.their_to_self_delay, // Rule #2 for type u32?
              our_to_self_delay: c.our_to_self_delay, // Rule #2 for type u32?
              max_accepted_htlcs: c.max_accepted_htlcs, // Rule #2 for type u32?
-             alias: c.alias.map(|v| v.into()),
 +            // Field: ListPeers.peers[].channels[].status[]
              status: c.status.map(|arr| arr.into_iter().map(|i| i.into()).collect()).unwrap_or(vec![]), // Rule #3
              in_payments_offered: c.in_payments_offered, // Rule #2 for type u64?
@@ -1552,7 +1548,7 @@
 @@ -1645,6 +1872,7 @@ impl From<requests::PayRequest> for pb::PayRequest {
              maxdelay: c.maxdelay.map(|v| v.into()), // Rule #2 for type u16?
              exemptfee: c.exemptfee.map(|f| f.into()), // Rule #2 for type msat?
-             localinvreqid: c.localinvreqid.map(|v| hex::decode(v).unwrap()), // Rule #2 for type hex?
+             localofferid: c.localofferid.map(|v| hex::decode(v).unwrap()), // Rule #2 for type hex?
 +            // Field: Pay.exclude
              exclude: c.exclude.map(|arr| arr.into_iter().map(|i| i.into()).collect()).unwrap_or(vec![]), // Rule #3
              maxfee: c.maxfee.map(|f| f.into()), // Rule #2 for type msat?
@@ -1815,7 +1811,7 @@
  	pub struct DisconnectRequest {
  	    pub id: PublicKey,
 @@ -1612,18 +1646,6 @@ pub mod responses {
- 	    pub remote: Option<ShortChannelId>,
+ 	    pub fee_rcvd_msat: Option<Amount>,
  	}
  
 -	#[derive(Clone, Debug, Deserialize, Serialize)]
@@ -1844,7 +1840,7 @@
  	#[derive(Clone, Debug, Deserialize, Serialize)]
 @@ -1735,8 +1759,6 @@ pub mod responses {
  	    #[serde(skip_serializing_if = "Option::is_none")]
- 	    pub alias: Option<ListpeersPeersChannelsAlias>,
+ 	    pub max_accepted_htlcs: Option<u32>,
  	    #[serde(skip_serializing_if = "crate::is_none_or_empty")]
 -	    pub state_changes: Option<Vec<ListpeersPeersChannelsState_changes>>,
 -	    #[serde(skip_serializing_if = "crate::is_none_or_empty")]
