--- /var/cache/distfiles/6e86fa92206eb6e935a8dcba37b9e7849d2cc816.patch	2022-12-02 20:37:31.813383089 -0500
+++ /var/tmp/portage/net-p2p/core-lightning-0.11.2-r111/temp/6e86fa92206eb6e935a8dcba37b9e7849d2cc816.patch	2022-12-03 00:33:36.552327264 -0500
@@ -123,15 +119,13 @@
  			 const u8 next_onion[TOTAL_PACKET_SIZE(ROUTING_INFO_SIZE)],
  			 const struct pubkey *next_blinding)
  {
-@@ -660,52 +700,21 @@ static void forward_htlc(struct htlc_in *hin,
- 	struct lightningd *ld = hin->key.channel->peer->ld;
+@@ -661,46 +701,20 @@ static void forward_htlc(struct htlc_in *hin,
  	struct channel *next;
  	struct htlc_out *hout = NULL;
--	struct short_channel_id *altscid;
--
+ 
 -	/* This is a shortcut for specifying next peer; doesn't mean
 -	 * the actual channel! */
--	next = any_channel_by_scid(ld, scid, false);
+-	next = any_channel_by_scid(ld, scid);
 -	if (next) {
 -		struct peer *peer = next->peer;
 -		struct channel *channel;
@@ -154,15 +148,11 @@
 -			if (amount_msat_less(amt_to_forward,
 -					     channel->channel_info.their_config.htlc_minimum))
 -				continue;
- 
--			altscid = channel->scid != NULL ? channel->scid
--							: channel->alias[LOCAL];
 -
 -			/* OK, it's better! */
 -			log_debug(next->log, "Chose a better channel: %s",
--				  type_to_string(tmpctx,
--						 struct short_channel_id,
--						 altscid));
+-				  type_to_string(tmpctx, struct short_channel_id,
+-						 channel->scid));
 -			next = channel;
 -		}
 -	}
@@ -170,7 +160,7 @@
 +		next = channel_by_cid(ld, forward_to);
 +		/* Update this to where we're actually trying to send. */
 +		if (next)
-+			forward_scid = channel_scid_or_local_alias(next);
++			forward_scid = next->scid;
 +	}else
 +		next = NULL;
  
@@ -179,16 +169,16 @@
  		local_fail_in_htlc(hin, take(towire_unknown_next_peer(NULL)));
  		wallet_forwarded_payment_add(hin->key.channel->peer->ld->wallet,
  					 hin, get_onion_style(hin),
--					 scid, NULL,
+-					 next ? next->scid : NULL, NULL,
 +					 forward_scid, NULL,
  					 FORWARD_LOCAL_FAILED,
  					 WIRE_UNKNOWN_NEXT_PEER);
  		return;
 @@ -803,7 +812,7 @@ static void forward_htlc(struct htlc_in *hin,
  fail:
  	local_fail_in_htlc(hin, failmsg);
  	wallet_forwarded_payment_add(ld->wallet,
--				 hin, get_onion_style(hin), scid, hout,
+-				 hin, get_onion_style(hin), next->scid, hout,
 +				 hin, get_onion_style(hin), forward_scid, hout,
  				 FORWARD_LOCAL_FAILED,
  				 fromwire_peektype(failmsg));
@@ -243,9 +233,9 @@
 +		json_add_channel_id(s, "forward_to", p->fwd_channel_id);
 +
  	json_object_start(s, "htlc");
- 	json_add_short_channel_id(
- 	    s, "short_channel_id",
+ 	json_add_short_channel_id(s, "short_channel_id", hin->key.channel->scid);
+ 	json_add_u64(s, "id", hin->key.id);
 @@ -1117,6 +1143,7 @@ htlc_accepted_hook_final(struct htlc_accepted_hook_payload *request STEALS)
  			     request->payload->amt_to_forward,
  			     request->payload->outgoing_cltv,
  			     request->payload->forward_channel,
@@ -271,7 +261,7 @@
 +	if (!p || !p->forward_channel)
 +		return NULL;
 +
-+	c = any_channel_by_scid(ld, p->forward_channel, false);
++	c = any_channel_by_scid(ld, p->forward_channel);
 +	if (!c)
 +		return NULL;
 +
@@ -282,7 +272,7 @@
 +			  type_to_string(tmpctx, struct short_channel_id,
 +					 p->forward_channel),
 +			  type_to_string(tmpctx, struct short_channel_id,
-+					 channel_scid_or_local_alias(best)));
++					 best->scid));
 +	}
 +
 +	return tal_dup(hp, struct channel_id, &best->cid);
