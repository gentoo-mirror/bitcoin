--- /var/cache/distfiles/7d7b2abd0203b3b3616866294c267acb55c94114.patch	2023-04-16 01:06:56.350839987 -0400
+++ /var/tmp/portage/net-p2p/core-lightning-0.12.1-r106/temp/7d7b2abd0203b3b3616866294c267acb55c94114.patch	2023-04-16 23:33:26.061951277 -0400
@@ -52,8 +52,8 @@
      fn from(c: responses::GetinfoResponse) -> Self {
          Self {
 @@ -64,15 +64,15 @@ impl From<responses::GetinfoResponse> for pb::GetinfoResponse {
-             blockheight: c.blockheight, // Rule #2 for type u32
-             network: c.network, // Rule #2 for type string
+             #[allow(deprecated)]
+             msatoshi_fees_collected: c.msatoshi_fees_collected, // Rule #2 for type u64?
              fees_collected_msat: Some(c.fees_collected_msat.into()), // Rule #2 for type msat
 -            address: c.address.into_iter().map(|i| i.into()).collect(), // Rule #3 for type GetinfoAddress 
 -            binding: c.binding.map(|arr| arr.into_iter().map(|i| i.into()).collect()).unwrap_or(vec![]), // Rule #3 
@@ -1147,7 +1147,7 @@
 @@ -1436,14 +1436,14 @@ impl From<requests::PayRequest> for pb::PayRequest {
              maxdelay: c.maxdelay.map(|v| v.into()), // Rule #2 for type u16?
              exemptfee: c.exemptfee.map(|f| f.into()), // Rule #2 for type msat?
-             localinvreqid: c.localinvreqid.map(|v| hex::decode(v).unwrap()), // Rule #2 for type hex?
+             localofferid: c.localofferid.map(|v| hex::decode(v).unwrap()), // Rule #2 for type hex?
 -            exclude: c.exclude.map(|arr| arr.into_iter().map(|i| i.into()).collect()).unwrap_or(vec![]), // Rule #3 
 +            exclude: c.exclude.map(|arr| arr.into_iter().map(|i| i.into()).collect()).unwrap_or(vec![]), // Rule #3
              maxfee: c.maxfee.map(|f| f.into()), // Rule #2 for type msat?
