From bf93c20e33008d4656ed6d32f879871d3ad8229c Mon Sep 17 00:00:00 2001
From: Matt Whitlock <matt@whitlock.name>
Date: Thu, 19 Oct 2023 05:52:25 -0400
Subject: [PATCH] support linking against system-installed libsecp256k1

---
 configure.ac              | 45 +++++++++++++++++++++++++++++++++++++--
 src/Makefile.am           | 10 +++++++--
 src/Makefile.test.include |  2 ++
 src/primitives/pak.h      |  2 +-
 4 files changed, 54 insertions(+), 5 deletions(-)

diff --git a/configure.ac b/configure.ac
index 7fcc48ddc1..cd88eadc74 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1322,6 +1322,45 @@ else
   CPPFLAGS="$CPPFLAGS -DPROVIDE_FUZZ_MAIN_FUNCTION"
 fi
 
+dnl Check for libsecp256k1, only if explicitly requested
+AC_ARG_WITH([system-libsecp256k1],
+  [AS_HELP_STRING([[--with-system-libsecp256k1[=PKG]]],
+    [build using system-installed libsecp256k1 instead of bundled, passing PKG (default: libsecp256k1_zkp) to pkg-config (default is no; DANGEROUS; NOT SUPPORTED)])],
+  [AS_IF([test "x$withval" = xyes], [with_system_libsecp256k1=libsecp256k1_zkp])],
+  [with_system_libsecp256k1=no])
+AM_CONDITIONAL([EMBEDDED_LIBSECP256K1],[test "x$with_system_libsecp256k1" = xno])
+AM_COND_IF([EMBEDDED_LIBSECP256K1], [
+  libsecp256k1_CFLAGS='-I$(srcdir)/secp256k1/include'
+  libsecp256k1_LIBS='secp256k1/libsecp256k1.la'
+], [
+  saved_CPPFLAGS=$CPPFLAGS
+  saved_LIBS=$LIBS
+  PKG_CHECK_MODULES([libsecp256k1], [$with_system_libsecp256k1])
+  CPPFLAGS="$libsecp256k1_CFLAGS $CPPFLAGS"
+  LIBS="$libsecp256k1_LIBS $LIBS"
+  missing_modules=
+  AC_DEFUN([CHECK_MODULE], [
+    AC_CHECK_HEADER([secp256k1_$1.h],
+      [AC_CHECK_FUNCS([$2], [], [missing_modules="${missing_modules} $1"])],
+      [missing_modules="${missing_modules} $1"])
+  ])
+  CHECK_MODULE([ecdh], [secp256k1_ecdh])
+  CHECK_MODULE([extrakeys], [secp256k1_xonly_pubkey_parse])
+  CHECK_MODULE([generator], [secp256k1_generator_parse])
+  CHECK_MODULE([rangeproof], [secp256k1_rangeproof_verify])
+  CHECK_MODULE([recovery], [secp256k1_ecdsa_recover])
+  CHECK_MODULE([schnorrsig], [secp256k1_schnorrsig_verify])
+  CHECK_MODULE([surjectionproof], [secp256k1_surjectionproof_initialize])
+  CHECK_MODULE([whitelist], [secp256k1_whitelist_verify])
+  AS_IF([test -n "${missing_modules}"], [
+    AC_MSG_ERROR([system-installed libsecp256k1 does not support these required modules:${missing_modules}])
+  ])
+  CPPFLAGS=$saved_CPPFLAGS
+  LIBS=$saved_LIBS
+])
+AC_SUBST(libsecp256k1_CFLAGS)
+AC_SUBST(libsecp256k1_LIBS)
+
 if test "$enable_wallet" != "no"; then
     dnl Check for libdb_cxx only if wallet enabled
     if test "$use_bdb" != "no"; then
@@ -1946,8 +1985,10 @@ PKGCONFIG_LIBDIR_TEMP="$PKG_CONFIG_LIBDIR"
 unset PKG_CONFIG_LIBDIR
 PKG_CONFIG_LIBDIR="$PKGCONFIG_LIBDIR_TEMP"
 
-ac_configure_args="${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --enable-module-whitelist --enable-module-rangeproof --enable-module-generator --enable-module-surjectionproof --enable-module-ecdh"
-AC_CONFIG_SUBDIRS([src/secp256k1])
+AM_COND_IF([EMBEDDED_LIBSECP256K1],[
+  ac_configure_args="${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --enable-module-whitelist --enable-module-rangeproof --enable-module-generator --enable-module-surjectionproof --enable-module-ecdh"
+  AC_CONFIG_SUBDIRS([src/secp256k1])
+])
 
 AC_OUTPUT
 
diff --git a/src/Makefile.am b/src/Makefile.am
index 4a2609abf5..fd463918d6 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -15,7 +15,7 @@ AM_LIBTOOLFLAGS = --preserve-dup-deps
 PTHREAD_FLAGS = $(PTHREAD_CFLAGS) $(PTHREAD_LIBS)
 EXTRA_LIBRARIES =
 
-BITCOIN_INCLUDES=-I$(builddir) -I$(srcdir)/$(MINISKETCH_INCLUDE_DIR_INT) -I$(srcdir)/secp256k1/include -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT) -I$(srcdir)/$(ELEMENTS_SIMPLICITY_INCLUDE_DIR_INT) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS)
+BITCOIN_INCLUDES=-I$(builddir) -I$(srcdir)/$(MINISKETCH_INCLUDE_DIR_INT) $(libsecp256k1_CFLAGS) -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT) -I$(srcdir)/$(ELEMENTS_SIMPLICITY_INCLUDE_DIR_INT) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS)
 
 LIBBITCOIN_NODE=libbitcoin_node.a
 LIBBITCOIN_COMMON=libbitcoin_common.a
@@ -24,7 +24,11 @@ LIBBITCOIN_CLI=libbitcoin_cli.a
 LIBBITCOIN_UTIL=libbitcoin_util.a
 LIBBITCOIN_CRYPTO_BASE=crypto/libbitcoin_crypto_base.a
 LIBBITCOINQT=qt/libbitcoinqt.a
+if EMBEDDED_LIBSECP256K1
 LIBSECP256K1=secp256k1/libsecp256k1.la
+else
+LIBSECP256K1=$(libsecp256k1_LIBS)
+endif
 
 if ENABLE_ZMQ
 LIBBITCOIN_ZMQ=libbitcoin_zmq.a
@@ -55,8 +59,10 @@ LIBBITCOIN_CRYPTO_ARM_SHANI = crypto/libbitcoin_crypto_arm_shani.a
 LIBBITCOIN_CRYPTO += $(LIBBITCOIN_CRYPTO_ARM_SHANI)
 endif
 
+if EMBEDDED_LIBSECP256K1
 $(LIBSECP256K1): $(wildcard secp256k1/src/*.h) $(wildcard secp256k1/src/*.c) $(wildcard secp256k1/include/*)
 	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)
+endif
 
 # Make is not made aware of per-object dependencies to avoid limiting building parallelization
 # But to build the less dependent modules first, we manually select their order here:
@@ -828,7 +834,7 @@ libelementsconsensus_la_SOURCES = support/cleanse.cpp $(crypto_libbitcoin_crypto
 
 libelementsconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)
 libelementsconsensus_la_LIBADD = $(LIBSECP256K1) $(LIBELEMENTSSIMPLICITY)
-libelementsconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)/obj -I$(srcdir)/secp256k1/include -I$(srcdir)/$(ELEMENTS_SIMPLICITY_INCLUDE_DIR_INT) -DBUILD_BITCOIN_INTERNAL
+libelementsconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)/obj $(libsecp256k1_CFLAGS) -I$(srcdir)/$(ELEMENTS_SIMPLICITY_INCLUDE_DIR_INT) -DBUILD_BITCOIN_INTERNAL
 libelementsconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
 
 endif
diff --git a/src/Makefile.test.include b/src/Makefile.test.include
index 943eedba57..17a6dbdadc 100644
--- a/src/Makefile.test.include
+++ b/src/Makefile.test.include
@@ -369,7 +369,9 @@ if ENABLE_BENCH
 	$(BENCH_BINARY) > /dev/null
 endif
 endif
+if EMBEDDED_LIBSECP256K1
 	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check
+endif
 
 if !ENABLE_FUZZ
 UNIVALUE_TESTS = univalue/test/object univalue/test/unitester univalue/test/no_nul
diff --git a/src/primitives/pak.h b/src/primitives/pak.h
index ba84075768..f40267df85 100644
--- a/src/primitives/pak.h
+++ b/src/primitives/pak.h
@@ -6,7 +6,7 @@
 #define BITCOIN_PRIMITIVES_PAK_H
 
 #include <script/script.h>
-#include <secp256k1/include/secp256k1_whitelist.h>
+#include <secp256k1_whitelist.h>
 #include <chain.h>
 
 class CPAKList
-- 
2.48.1

