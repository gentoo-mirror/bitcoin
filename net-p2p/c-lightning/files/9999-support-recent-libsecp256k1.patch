From 5f4841cd8b6421ba5a6f7ca9c916f9ddd9d2ad6a Mon Sep 17 00:00:00 2001
From: Matt Whitlock <c-lightning@mattwhitlock.name>
Date: Wed, 9 Feb 2022 05:12:03 -0500
Subject: [PATCH] support recent libsecp256k1

---
 common/bolt12.c              |  3 +++
 configure                    |  8 ++++++++
 devtools/bolt12-cli.c        |  3 +++
 hsmd/libhsmd.c               |  5 ++++-
 lightningd/offer.c           |  6 +++++-
 plugins/fetchinvoice.c       | 11 +++++++++--
 plugins/offers_inv_hook.c    |  3 +++
 plugins/offers_invreq_hook.c | 12 ++++++++++--
 8 files changed, 45 insertions(+), 6 deletions(-)

diff --git a/common/bolt12.c b/common/bolt12.c
index a57a16627..36bcb24c6 100644
--- a/common/bolt12.c
+++ b/common/bolt12.c
@@ -83,6 +83,9 @@ bool bolt12_check_signature(const struct tlv_field *fields,
 	return secp256k1_schnorrsig_verify(secp256k1_ctx,
 					   sig->u8,
 					   shash.u.u8,
+#if HAVE_RECENT_LIBSECP256K1
+					   32,
+#endif
 					   &key->pubkey) == 1;
 }
 
diff --git a/configure b/configure
index e07d52069..0bfb82479 100755
--- a/configure
+++ b/configure
@@ -396,6 +396,14 @@ int main(void)
 	return 1;
 }
 /*END*/
+var=HAVE_RECENT_LIBSECP256K1
+desc=recent libsecp256k1
+style=OUTSIDE_MAIN
+code=
+#include <secp256k1_schnorrsig.h>
+
+static const secp256k1_schnorrsig_extraparams test = SECP256K1_SCHNORRSIG_EXTRAPARAMS_INIT;
+/*END*/
 EOF
 
 if check_command 'python3-mako' python3 -c 'import mako'; then
diff --git a/devtools/bolt12-cli.c b/devtools/bolt12-cli.c
index de7dedf1b..c6536b3d4 100644
--- a/devtools/bolt12-cli.c
+++ b/devtools/bolt12-cli.c
@@ -321,6 +321,9 @@ static bool print_signature(const char *messagename,
 	if (secp256k1_schnorrsig_verify(secp256k1_ctx,
 					sig->u8,
 					shash.u.u8,
+#if HAVE_RECENT_LIBSECP256K1
+					32,
+#endif
 					&node_id->pubkey) != 1) {
 		fprintf(stderr, "%s: INVALID\n", fieldname);
 		return false;
diff --git a/hsmd/libhsmd.c b/hsmd/libhsmd.c
index b8e230718..9004e93b6 100644
--- a/hsmd/libhsmd.c
+++ b/hsmd/libhsmd.c
@@ -638,7 +638,10 @@ static u8 *handle_sign_bolt12(struct hsmd_client *c, const u8 *msg_in)
 	if (!secp256k1_schnorrsig_sign(secp256k1_ctx, sig.u8,
 				       sha.u.u8,
 				       &kp,
-				       NULL, NULL)) {
+#if !HAVE_RECENT_LIBSECP256K1
+				       NULL,
+#endif
+				       NULL)) {
 		return hsmd_status_bad_request_fmt(c, msg_in,
 						   "Failed to sign bolt12");
 	}
diff --git a/lightningd/offer.c b/lightningd/offer.c
index e251f3b62..a12ab820a 100644
--- a/lightningd/offer.c
+++ b/lightningd/offer.c
@@ -77,7 +77,11 @@ static void hsm_sign_b12(struct lightningd *ld,
 	/* Now we sanity-check! */
 	sighash_from_merkle(messagename, fieldname, merkle, &sighash);
 	if (secp256k1_schnorrsig_verify(secp256k1_ctx, sig->u8,
-					sighash.u.u8, &key->pubkey) != 1)
+					sighash.u.u8,
+#if HAVE_RECENT_LIBSECP256K1
+					32,
+#endif
+					&key->pubkey) != 1)
 		fatal("HSM gave bad signature %s for pubkey %s",
 		      type_to_string(tmpctx, struct bip340sig, sig),
 		      type_to_string(tmpctx, struct point32, key));
diff --git a/plugins/fetchinvoice.c b/plugins/fetchinvoice.c
index d63d3680d..7a9c11644 100644
--- a/plugins/fetchinvoice.c
+++ b/plugins/fetchinvoice.c
@@ -218,7 +218,11 @@ static struct command_result *handle_invreq_response(struct command *cmd,
 
 	if (!inv->signature
 	    || secp256k1_schnorrsig_verify(secp256k1_ctx, inv->signature->u8,
-					   sighash.u.u8, &inv->node_id->pubkey) != 1) {
+					   sighash.u.u8,
+#if HAVE_RECENT_LIBSECP256K1
+					   32,
+#endif
+					   &inv->node_id->pubkey) != 1) {
 		badfield = "signature";
 		goto badinv;
 	}
@@ -1202,7 +1206,10 @@ force_payer_secret(struct command *cmd,
 				       sent->invreq->signature->u8,
 				       sha.u.u8,
 				       &kp,
-				       NULL, NULL)) {
+#if !HAVE_RECENT_LIBSECP256K1
+				       NULL,
+#endif
+				       NULL)) {
 		return command_fail(cmd, LIGHTNINGD,
 				    "Failed to sign with payer_secret");
 	}
diff --git a/plugins/offers_inv_hook.c b/plugins/offers_inv_hook.c
index cc8731ae6..e393cecdf 100644
--- a/plugins/offers_inv_hook.c
+++ b/plugins/offers_inv_hook.c
@@ -384,6 +384,9 @@ struct command_result *handle_invoice(struct command *cmd,
 	if (secp256k1_schnorrsig_verify(secp256k1_ctx,
 					inv->inv->signature->u8,
 					shash.u.u8,
+#if HAVE_RECENT_LIBSECP256K1
+					32,
+#endif
 					&inv->inv->node_id->pubkey) != 1) {
 		return fail_inv(cmd, inv, "Bad signature");
 	}
diff --git a/plugins/offers_invreq_hook.c b/plugins/offers_invreq_hook.c
index c5fd0bb5b..2c27c2750 100644
--- a/plugins/offers_invreq_hook.c
+++ b/plugins/offers_invreq_hook.c
@@ -429,7 +429,11 @@ static bool check_payer_sig(const struct tlv_invoice_request *invreq,
 
 	if (secp256k1_schnorrsig_verify(secp256k1_ctx,
 					sig->u8,
-					sighash.u.u8, &payer_key->pubkey) == 1)
+					sighash.u.u8,
+#if HAVE_RECENT_LIBSECP256K1
+					32,
+#endif
+					&payer_key->pubkey) == 1)
 		return true;
 
 	if (!deprecated_apis)
@@ -441,7 +445,11 @@ static bool check_payer_sig(const struct tlv_invoice_request *invreq,
 
 	return secp256k1_schnorrsig_verify(secp256k1_ctx,
 					   sig->u8,
-					   sighash.u.u8, &payer_key->pubkey) == 1;
+					   sighash.u.u8,
+#if HAVE_RECENT_LIBSECP256K1
+					   32,
+#endif
+					   &payer_key->pubkey) == 1;
 }
 
 static struct command_result *invreq_amount_by_quantity(struct command *cmd,
-- 
2.35.1

